CSS Theory lectures

All CSS rules are applied unless conflicting. To resolve this there is a higher-archy of selectors and if the selectors are the same (class and class) the most recent (latest in the stylesheet) is used. From highest to lowest: ID, pseudo-class, class, element (more sepcific article p li is applied, compared to li for example). inline styles are prioritised over the ID selector and the !important is the highest priority of all.


1. Resolving Conflicts

- ID highest so text red, then yellow as classes are the same but .text is more recntly written then blue then green.

#copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green;
}

2. Inheritence

Some properties go from parent to child elements - not all are inherited, mostly it is text related. Inherited properties are easily overwritten by declaring a style more specifically to child elements. Inheritence is not the same as conflicting properties.

Example:
- color is inhertied
- font-family is inherited
- font size

Not inherited example:
- Border

The universal selector - the * - forces inheritence of anything on ever single element. Even on not inherited examples like border. So there's an important difference between universal selector and body selector.

3. Box model

think of all elements as a rectangular bos. Inside is the content, then the padding, then the border and then the margin. The border is technically still inside the box space and so is the padding. Margin is outside of the element - used to create space between boxes.

the FILL AREA that is where an image would FILL or a background-color would FILL an element. This includes the content, padding and border space.

The default FINAL height and width is calculated based on the width and height of the border, padding and content. This can be changed later and usually is.

4. Types of box

Can't change inline things, like anchor or strong etc. as these cannot have their width dictated.

block level - always occupies 100% of width, box model applies. Most HTML elements are block-level elements.

inline - only occupy exactly the needed content space. they create no line breaks (<br>) so easily occupy. The height and width cannot be changed and the margin and padding can only be applied to left and right to inline properties. padding added to inline boxes makes a mess - they expand but no more space is made in the page for them.

inline-block elements - Appear as inline and cause no line breaks but height, width, margin and padding can be used. Images behave like inline block elements.